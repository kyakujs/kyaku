/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignInImport } from './routes/sign-in'
import { Route as AuthedImport } from './routes/_authed'
import { Route as AuthedLayoutImport } from './routes/_authed/_layout'
import { Route as AuthedLayoutIndexImport } from './routes/_authed/_layout.index'
import { Route as AuthedLayoutSettingsImport } from './routes/_authed/_layout.settings'

// Create/Update Routes

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const AuthedRoute = AuthedImport.update({
  id: '/_authed',
  getParentRoute: () => rootRoute,
} as any)

const AuthedLayoutRoute = AuthedLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => AuthedRoute,
} as any)

const AuthedLayoutIndexRoute = AuthedLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedLayoutRoute,
} as any)

const AuthedLayoutSettingsRoute = AuthedLayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthedLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/_authed/_layout': {
      id: '/_authed/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedLayoutImport
      parentRoute: typeof AuthedImport
    }
    '/_authed/_layout/settings': {
      id: '/_authed/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthedLayoutSettingsImport
      parentRoute: typeof AuthedLayoutImport
    }
    '/_authed/_layout/': {
      id: '/_authed/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedLayoutIndexImport
      parentRoute: typeof AuthedLayoutImport
    }
  }
}

// Create and export the route tree

interface AuthedLayoutRouteChildren {
  AuthedLayoutSettingsRoute: typeof AuthedLayoutSettingsRoute
  AuthedLayoutIndexRoute: typeof AuthedLayoutIndexRoute
}

const AuthedLayoutRouteChildren: AuthedLayoutRouteChildren = {
  AuthedLayoutSettingsRoute: AuthedLayoutSettingsRoute,
  AuthedLayoutIndexRoute: AuthedLayoutIndexRoute,
}

const AuthedLayoutRouteWithChildren = AuthedLayoutRoute._addFileChildren(
  AuthedLayoutRouteChildren,
)

interface AuthedRouteChildren {
  AuthedLayoutRoute: typeof AuthedLayoutRouteWithChildren
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedLayoutRoute: AuthedLayoutRouteWithChildren,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof AuthedLayoutRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/settings': typeof AuthedLayoutSettingsRoute
  '/': typeof AuthedLayoutIndexRoute
}

export interface FileRoutesByTo {
  '': typeof AuthedRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/settings': typeof AuthedLayoutSettingsRoute
  '/': typeof AuthedLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authed': typeof AuthedRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/_authed/_layout': typeof AuthedLayoutRouteWithChildren
  '/_authed/_layout/settings': typeof AuthedLayoutSettingsRoute
  '/_authed/_layout/': typeof AuthedLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/sign-in' | '/settings' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '' | '/sign-in' | '/settings' | '/'
  id:
    | '__root__'
    | '/_authed'
    | '/sign-in'
    | '/_authed/_layout'
    | '/_authed/_layout/settings'
    | '/_authed/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  SignInRoute: typeof SignInRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  SignInRoute: SignInRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authed",
        "/sign-in"
      ]
    },
    "/_authed": {
      "filePath": "_authed.tsx",
      "children": [
        "/_authed/_layout"
      ]
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/_authed/_layout": {
      "filePath": "_authed/_layout.tsx",
      "parent": "/_authed",
      "children": [
        "/_authed/_layout/settings",
        "/_authed/_layout/"
      ]
    },
    "/_authed/_layout/settings": {
      "filePath": "_authed/_layout.settings.tsx",
      "parent": "/_authed/_layout"
    },
    "/_authed/_layout/": {
      "filePath": "_authed/_layout.index.tsx",
      "parent": "/_authed/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
